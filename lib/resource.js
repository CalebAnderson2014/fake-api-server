// Generated by CoffeeScript 1.8.0
(function() {
  var Resource;

  Resource = function(name, pluralName) {
    var funnels, idAttribute, idFactory, records, resource, updateInPlace, validators;
    records = [];
    validators = [];
    funnels = [];
    idAttribute = "id";
    idFactory = function() {
      var d;
      return 1 + Math.max(0, Math.max.apply(Math, (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = records.length; _i < _len; _i++) {
          d = records[_i];
          _results.push(d[idAttribute]);
        }
        return _results;
      })()));
    };
    updateInPlace = function(record) {
      var i, r, _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = records.length; _i < _len; i = ++_i) {
        r = records[i];
        if (r.id === record.id) {
          _results.push(records[i] = record);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    return resource = {
      name: name,
      pluralName: pluralName || ("" + name + "s"),
      memberActions: {},
      idAttribute: function() {
        if (arguments.length === 0) {
          return idAttribute;
        } else {
          idAttribute = arguments[0];
          return resource;
        }
      },
      idFactory: function() {
        if (arguments.length === 0) {
          return idFactory;
        } else {
          idFactory = arguments[0];
          return resource;
        }
      },
      addValidator: function(v) {
        validators.push(v);
        return this;
      },
      addFunnel: function(f) {
        funnels.push(f);
        return this;
      },
      addMemberAction: function(name, f) {
        resource.memberActions[name] = f;
        return this;
      },
      uniqueAttribute: function(attr) {
        return this.addValidator(function(record) {
          var r, _i, _len;
          for (_i = 0, _len = records.length; _i < _len; _i++) {
            r = records[_i];
            return {
              name: 'is taken'
            };
          }
          return void 0;
        });
      },
      all: function() {
        return records;
      },
      add: function(records) {
        var rec, result, _i, _len;
        if (!Array.isArray(records)) {
          records = [records];
        }
        for (_i = 0, _len = records.length; _i < _len; _i++) {
          rec = records[_i];
          result = resource.create(rec, rec[idAttribute]);
          if (result._errors) {
            throw new Error("Invalid record: " + JSON.stringify(result));
          }
        }
        return resource;
      },
      create: function(record, id, resources) {
        var f, result, validate, _i, _j, _len, _len1;
        for (_i = 0, _len = funnels.length; _i < _len; _i++) {
          f = funnels[_i];
          record = f(record, resources);
        }
        for (_j = 0, _len1 = validators.length; _j < _len1; _j++) {
          validate = validators[_j];
          result = validate(record, resources);
          if (result != null) {
            return {
              _errors: result
            };
          }
        }
        record[idAttribute] = id || idFactory();
        records = records.concat([record]);
        return record;
      },
      find: function(id) {
        var r, _i, _len;
        id = parseInt(id);
        for (_i = 0, _len = records.length; _i < _len; _i++) {
          r = records[_i];
          if (r[idAttribute].toString() === id.toString()) {
            return r;
          }
        }
        return false;
      },
      update: function(id, updates, resources) {
        var f, record, value, _i, _len;
        id = parseInt(id);
        record = this.find(id);
        if (!record) {
          return false;
        }
        for (name in updates) {
          value = updates[name];
          if (name !== idAttribute) {
            record[name] = value;
          }
        }
        if (funnels.length) {
          for (_i = 0, _len = funnels.length; _i < _len; _i++) {
            f = funnels[_i];
            record = f(record, resources);
          }
          updateInPlace(record);
        }
        return record;
      },
      runAction: function(name, id, params, resources) {
        var record;
        record = this.find(id);
        if (!record) {
          return false;
        }
        resource.memberActions[name](record, params, resources);
        return record;
      },
      remove: function(id) {
        var record;
        id = parseInt(id);
        record = this.find(id);
        if (!record) {
          return false;
        }
        records = records.filter(function(d) {
          return ("" + d[idAttribute]) !== ("" + id);
        });
        return true;
      }
    };
  };

  module.exports = Resource;

}).call(this);
