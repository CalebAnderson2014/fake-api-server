// Generated by CoffeeScript 1.8.0
(function() {
  var Server, bodyParser, express;

  express = require('express');

  bodyParser = require('body-parser');

  Server = function() {
    var getResource, listen, register, resources, server;
    resources = [];
    server = express();
    server.use(bodyParser());
    getResource = function(cb) {
      return function(req, res) {
        var path, resource, sendResponse, _i, _len;
        path = req.params.resource;
        sendResponse = function(resource) {
          var errorMsg;
          try {
            return res.send(cb(req, resource));
          } catch (_error) {
            errorMsg = _error;
            res.statusCode = 404;
            return res.send(errorMsg);
          }
        };
        for (_i = 0, _len = resources.length; _i < _len; _i++) {
          resource = resources[_i];
          if (resource.pluralName() === path) {
            sendResponse(resource);
          }
        }
        return res.send(404);
      };
    };
    server.on("error", function(err) {
      return console.error(err);
    });
    server.get("/api", function(req, res) {
      return res.send(resources.map(function(resource) {
        return {
          name: resource.name(),
          url: "/api/" + (resource.pluralName())
        };
      }));
    });
    server.get("/api/:resource", getResource(function(req, resource) {
      return resource.all();
    }));
    server.get("/api/:resource/:id", getResource(function(req, resource) {
      return resource.find(req.params.id) || (function() {
        throw "No " + (resource.name()) + " with id " + req.params.id;
      })();
    }));
    server.post("/api/:resource", getResource(function(req, resource) {
      return resource.add(req.body);
    }));
    server.put("/api/:resource/:id", getResource(function(req, resource) {
      return resource.update(req.params.id, req.body) || (function() {
        throw "No " + (resource.name()) + " with id " + req.params.id;
      })();
    }));
    server["delete"]("/api/:resource/:id", getResource(function(req, resource) {
      return resource.remove(req.params.id || (function() {
        throw "No " + (resource.name()) + " with id " + req.params.id;
      })());
    }));
    listen = function(port) {
      if (port == null) {
        port = 3000;
      }
      server.listen(port);
      console.log("server listening on localhost:" + port);
      return this;
    };
    register = function(resource) {
      resources = resources.concat([resource]);
      return this;
    };
    return {
      listen: listen,
      register: register
    };
  };

  module.exports = Server;

}).call(this);
