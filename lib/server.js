// Generated by CoffeeScript 1.8.0
(function() {
  var ResourceServer, Server, bodyParser, enableCORS, enableUserAccounts, express, find, passParentParams, pathLib, tokenFromBody, tokenFromHeader, uuid;

  express = require('express');

  bodyParser = require('body-parser');

  ResourceServer = require('./resource-server');

  pathLib = require('path');

  Server = function(options) {
    var fail, registered, server;
    if (options == null) {
      options = {};
    }
    registered = [];
    server = enableCORS(express());
    if (typeof options.config === "function") {
      options.config(server);
    }
    server.use(bodyParser());
    fail = function(message, code) {
      if (code == null) {
        code = 404;
      }
      throw {
        message: message,
        code: code
      };
    };
    server.resources = {};
    server.use(function(req, res, next) {
      req.serverResources = server.resources;
      return next();
    });
    server.on("error", function(err) {
      return console.error(err);
    });
    server.get("/", function(req, res) {
      return res.send(registered.map(function(register) {
        return {
          name: register.resource.name,
          url: register.path
        };
      }));
    });
    server.enableUserAccounts = enableUserAccounts.bind(null, server);
    server.register = function(resource, nestedResource) {
      var npath, parentId, path, resourceServer;
      path = "/" + resource.pluralName;
      if (nestedResource) {
        resourceServer = new ResourceServer(nestedResource);
        parentId = "" + resource.name + "Id";
        resourceServer.addFilter('GET /', function(req, record) {
          return record[parentId] === req.params[parentId];
        });
        nestedResource.addValidator(function(record) {
          var errors;
          if (!resource.find(record[parentId])) {
            errors = {};
            errors[parentId] = ["" + resource.name + " with id=" + record[parentId] + " does not exist"];
            return errors;
          } else {
            return void 0;
          }
        });
        npath = "" + path + "/:" + parentId + "/" + nestedResource.pluralName;
        server.use(npath, passParentParams);
        server.use(npath, resourceServer);
        registered.push({
          path: npath,
          resource: nestedResource
        });
      } else {
        resourceServer = new ResourceServer(resource);
        server.use(path, resourceServer);
        registered.push({
          path: path,
          resource: resource
        });
      }
      server.resources[resource.pluralName] = resource;
      return this;
    };
    return server;
  };

  passParentParams = function(req, res, next) {
    var param, val, _ref;
    req.parentParams = req.params;
    _ref = req.parentParams;
    for (param in _ref) {
      val = _ref[param];
      if (param.match(/Id$/)) {
        req.parentParams[param] = parseInt(val);
      }
    }
    return next();
  };

  module.exports = Server;

  enableCORS = function(server) {
    server.use(function(req, res, next) {
      res.header("Access-Control-Allow-Origin", "*");
      res.header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
      res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
      return next();
    });
    return server;
  };

  enableUserAccounts = function(server) {
    var findUserByUsername, sessions, users;
    server.skipAuthPaths = ['GET /', 'POST /signup', 'POST /signin'];
    users = server.resources._users = [];
    sessions = server.resources._sessions = {};
    findUserByUsername = function(username) {
      return find(users, function(user) {
        return user.username === username;
      });
    };
    server.post('/signup', function(req, res) {
      var existingUser, id;
      existingUser = findUserByUsername(req.body.username);
      if (existingUser) {
        return res.status(400).send('username_taken');
      }
      id = 1 + Object.keys(users).length;
      users.push({
        id: id,
        username: req.body.username,
        password: req.body.password
      });
      return res.status(200).json({
        status: 'success'
      });
    });
    server.post('/signin', function(req, res) {
      var tokenId, user;
      user = findUserByUsername(req.body.username);
      if (!user) {
        return res.status(400).send('username_does_not_exist');
      }
      if (user.password !== req.body.password) {
        return res.status(400).send('incorrect_password');
      }
      tokenId = uuid();
      sessions[tokenId] = user.id;
      return res.json({
        apiToken: tokenId
      });
    });
    server.use(function(req, res, next) {
      var sessionId, userId;
      if (server.skipAuthPaths.indexOf("" + (req.method.toUpperCase()) + " " + req.path) >= 0) {
        return next();
      }
      sessionId = tokenFromHeader(req) || req.params.apiToken || tokenFromBody(req);
      if (!sessionId) {
        return res.status(401).end();
      }
      userId = sessions[sessionId];
      if (userId == null) {
        return res.status(401).end();
      }
      req.user = find(users, function(u) {
        return u.id === userId;
      });
      if (req.user == null) {
        return res.status(401).end();
      }
      return next();
    });
    return server;
  };

  tokenFromHeader = function(req) {
    var header, match;
    header = req.get('Authorization');
    if (!header) {
      return;
    }
    match = header.match(/^API token="([^"]+)"$/);
    return match && match[1];
  };

  tokenFromBody = function(req) {
    var token;
    if (req.body == null) {
      return null;
    }
    token = req.body.apiToken;
    delete req.body.apiToken;
    return token;
  };

  find = function(array, pred) {
    var elem, _i, _len;
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      elem = array[_i];
      if (pred(elem)) {
        return elem;
      }
    }
    return null;
  };

  uuid = function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r, v;
      r = Math.random() * 16 | 0;
      v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  };

}).call(this);
