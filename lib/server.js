// Generated by CoffeeScript 1.8.0
(function() {
  var ResourceServer, Server, bodyParser, express, passParentParams, pathLib;

  express = require('express');

  bodyParser = require('body-parser');

  ResourceServer = require('./resource-server');

  pathLib = require('path');

  Server = function(options) {
    var fail, resources, server;
    if (options == null) {
      options = {};
    }
    resources = [];
    server = express();
    if (typeof options.config === "function") {
      options.config(server);
    }
    server.use(bodyParser());
    fail = function(message, code) {
      if (code == null) {
        code = 404;
      }
      throw {
        message: message,
        code: code
      };
    };
    server.on("error", function(err) {
      return console.error(err);
    });
    server.get("/", function(req, res) {
      return res.send(resources.map(function(resource) {
        return {
          name: resource.name,
          url: "/" + resource.pluralName
        };
      }));
    });
    server.register = function(resource, nestedResource) {
      var nestedServer, npath, parentId, path, resourceServer;
      resourceServer = new ResourceServer(resource);
      resources = resources.concat([resource]);
      path = "/" + resource.pluralName;
      if (nestedResource) {
        nestedServer = new ResourceServer(nestedResource);
        resources = resources.concat([nestedResource]);
        parentId = "" + resource.name + "Id";
        nestedServer.addFilter('GET /', function(req, record) {
          return record[parentId] === req.params[parentId];
        });
        nestedResource.addValidator(function(record) {
          var errors;
          if (!resource.find(record[parentId])) {
            errors = {};
            errors[parentId] = ["" + resource.name + " with id=" + record[parentId] + " does not exist"];
            return errors;
          } else {
            return void 0;
          }
        });
        npath = "" + path + "/:" + parentId + "/" + nestedResource.pluralName;
        server.use(npath, passParentParams);
        server.use(npath, nestedServer);
      }
      server.use(path, resourceServer);
      return this;
    };
    return server;
  };

  passParentParams = function(req, res, next) {
    req.parentParams = req.params;
    return next();
  };

  module.exports = Server;

}).call(this);
