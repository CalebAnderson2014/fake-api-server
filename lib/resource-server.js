// Generated by CoffeeScript 1.8.0
(function() {
  var ResourceServer, bodyParser, express, extend;

  express = require('express');

  bodyParser = require('body-parser');

  extend = function(target, source) {
    var k, v, _results;
    _results = [];
    for (k in source) {
      v = source[k];
      _results.push(target[k] = v);
    }
    return _results;
  };

  ResourceServer = function(resource) {
    var actionName, fail, filters, respondTo, server;
    filters = {};
    server = express();
    server.use(bodyParser());
    server.addResponseFilter = function(method_url, f) {
      filters[method_url] || (filters[method_url] = []);
      return filters[method_url].push(f);
    };
    fail = function(message, code) {
      if (code == null) {
        code = 404;
      }
      throw {
        message: message,
        code: code
      };
    };
    respondTo = function(method_url, cb) {
      var method, url, _ref;
      _ref = method_url.split(' '), method = _ref[0], url = _ref[1];
      return server[method.toLowerCase()](url, function(req, res) {
        var error, f, result, _i, _len, _ref1;
        extend(req.params, req.parentParams);
        try {
          result = cb(req);
          if (filters[method_url]) {
            _ref1 = filters[method_url];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              f = _ref1[_i];
              result = result.filter(f.bind(null, req));
            }
          }
          return res.send(result);
        } catch (_error) {
          error = _error;
          res.statusCode = error.code;
          return res.send(error.message);
        }
      });
    };
    server.on("error", function(err) {
      return console.error(err);
    });
    respondTo('GET /', function(req) {
      return resource.all();
    });
    respondTo('GET /:id', function(req) {
      return resource.find(req.params.id) || fail("No " + resource.name + " with id " + req.params.id);
    });
    respondTo('POST /', function(req) {
      var result;
      extend(req.body, req.params);
      result = resource.create(req.body);
      if (result._errors) {
        fail(result._errors, 400);
      }
      return result;
    });
    respondTo('PUT /:id', function(req) {
      return resource.update(req.params.id, req.body) || fail("No " + resource.name + " with id " + req.params.id);
    });
    respondTo('DELETE /:id', function(req) {
      return resource.remove(req.params.id) || fail("No " + resource.name + " with id " + req.params.id);
    });
    for (actionName in resource.memberActions) {
      respondTo("POST /:id/" + actionName, function(req) {
        var id;
        id = req.params.id;
        return resource.runAction(actionName, {
          id: id,
          params: req.body,
          resources: req.serverResources,
          currentUser: req.user
        }) || fail("No " + resource.name + " with id " + id);
      });
    }
    return server;
  };

  module.exports = ResourceServer;

}).call(this);
